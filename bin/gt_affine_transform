#!/usr/bin/env python3
# -----------------------------------------------------------------------------
#   Copyright (C): OpenGATE Collaboration
#   This software is distributed under the terms
#   of the GNU Lesser General  Public Licence (LGPL)
#   See LICENSE.md for further details
# -----------------------------------------------------------------------------

import gatetools as gt
import itk
import click
import sys
import numpy as np
import os
import logging
logger=logging.getLogger(__name__)

def convertNewParameterToFloat(newParameterString, size):
    if newParameterString is not None:
        parameterFloat = np.array(newParameterString.split(','))
        parameterFloat = parameterFloat.astype(np.float)
        if len(parameterFloat) == 1:
            parameterFloat = np.array([]*size)
        return parameterFloat
    else:
        return []
    

# -----------------------------------------------------------------------------
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)




@click.option('--input','-i', help='Input filename', required=True,
              type=click.Path(dir_okay=False))
@click.option('--output','-o', help='Output filename', required=True,
              type=click.Path(dir_okay=False,
                              writable=True, readable=False,
                              resolve_path=True, allow_dash=False, path_type=None))
@click.option('--newsize', help='New Size for the output', type=str)
@click.option('--neworigin', help='New Origin for the output', type=str)
@click.option('--newspacing', help='New Spacing for the output', type=str)
@click.option('--newdirection', help='New Direction for the output', type=str)


@click.option('--like', '-l', help='Output have the same size, origin, spacing and direction than the like image', type=click.Path(dir_okay=False))
@click.option('--spacinglike', '-sl', help='Output have the same spacing than the spacinglike image', type=click.Path(dir_okay=False))


@click.option('--force_resample', '-fr', help='Force to resample the output instead of changing the metadata', is_flag=True)
@click.option('--keep_original_canvas', '-koc', help='Do the transformation on the image but the output has the same physical region than input', is_flag=True)


@click.option('--matrix', '-m', help='Matrix for affine transformation', type=click.Path(dir_okay=False))
@click.option('--rotation', '-r', help='Rotation for affine transformation', type=str)
@click.option('--center', '-c', help='Rotation center or affine transformation', type=str)
@click.option('--translation', '-t', help='Translation for affine transformation', type=str)

@click.option('--pad', '-p', help='New value for padding', default=0.0)

@click.option('--interpolation_mode', help='Interpolation mode', default='linear', type=click.Choice(['NN', 'linear']))

@gt.add_options(gt.common_options)
def gt_affine_transform_main(input, output, newsize, neworigin, newspacing, newdirection, like, spacinglike, force_resample, keep_original_canvas, matrix, rotation, center, translation, pad, interpolation_mode, **kwargs):
    '''
    Basic affine transfomation and resampling of images
    
    eg:
    gt_affine_transform -i input.mhd -o output.mhd --newsize 2.0
    gt_affine_transform -i input.mhd -o output.mhd --newsize "2.0,3.0,4.0"
    
    There is 3 modes to apply the transfrom:
      - by default, the transformation is applied to the mhd metadata. In such a case, no resempling is done. The raw file contains the same data, just the mhd file change.
      - with force_resample flag, the output image is the reseampled imput image.
      - with keep_interpolation_flag, the transformation is applied to the image the but output have the same characteristics than the input. This flag can lead to see the pixels outside the canvas after a translation for example.
    
    matrix in the path to a file containing the transformation matrix (rotation + translation). Example for a 3D image:
    1 0 0 0
    0 1 0 0
    0 0 1 0
    0 0 0 1

    rotation is in degree. By default, the rotation is around the center of the image
    '''

    # logger
    gt.logging_conf(**kwargs)
    
    inputImage = itk.imread(input)
    imageDimension = inputImage.GetImageDimension()
    likeImage = None
    spacingLikeImage = None
    if like is not None:
        likeImage = itk.imread(like)
    if spacinglike is not None:
        spacingLikeImage = itk.imread(spacinglike)

    size = convertNewParameterToFloat(newsize, imageDimension)
    origin = convertNewParameterToFloat(neworigin, imageDimension)
    spacing = convertNewParameterToFloat(newspacing, imageDimension)
    direction = convertNewParameterToFloat(newdirection, imageDimension**2)
    rotationParameter = convertNewParameterToFloat(rotation, imageDimension)
    rotationCenterParameter = convertNewParameterToFloat(center, imageDimension)
    translationParameter = convertNewParameterToFloat(translation, imageDimension)
    matrixParameter = None
    if not matrix is None:
        if not os.path.isfile(matrix):
            logger.error("Cannot read the matrix file: " + matrix)
            sys.exit(1)
        try:
            with open(matrix, 'r') as f:
                readMatrix = [[float(num) for num in line.split(' ')] for line in f if line.strip() != "" ]
        except Exception as e:
            logger.error("Cannot read the matrix file: ")
            logger.error(e)
            sys.exit(1)
        matrixParameter = itk.matrix_from_array(np.array(readMatrix))

    outputImage = gt.applyTransformation(inputImage, likeImage, spacingLikeImage, matrixParameter, newsize = size, neworigin = origin, newspacing = spacing, newdirection = direction, force_resample = force_resample, keep_original_canvas = keep_original_canvas, rotation = rotationParameter, rotation_center = rotationCenterParameter, translation = translationParameter, pad = pad, interpolation_mode = interpolation_mode)
    
    itk.imwrite(outputImage, output)
    

# -----------------------------------------------------------------------------
if __name__ == '__main__':
    gt_affine_transform_main()
