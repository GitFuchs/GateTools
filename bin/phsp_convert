#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import numpy as np
import phsp
import click
import os

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('input_filename')
@click.option('-n', default=float(-1), help='Use -1 to read all data')
@click.option('--output', '-o', default='AUTO', help='If AUTO, use input_filename.npy')
@click.option('--rm_keys', '-r', multiple=True, help='Remove the given keys')
@click.option('--keys', '-k', help='Set the kept keys, give as a list such that "X Y Z" ', default='')
@click.option('--overwrite', '-f', is_flag=True, default=False, help='Overwrite file if already exist')
@click.option('--shuffle', '-s', is_flag=True, default=False, help='Shuffle the data')
def phsp_convert(input_filename, output, keys, rm_keys, n, overwrite, shuffle):
    '''
    \b
    Convert to npy

    \b
    <INPUT_FILENAME> : input PHSP root file
    '''

    if output == 'AUTO':
        b, extension = os.path.splitext(input_filename)
        output = b+'.npy'

    if not overwrite and os.path.isfile(output):
        print('Error output file already exist:', output)
        exit(0)
        
    if os.path.isdir(output):
        print('Error output already exist (its a dir):', output)
        exit(0)

    b, extension = os.path.splitext(output)
    if extension != '.npy':
        print('Error output extension must by .npy:', output)
        exit(0)

    if keys != '' and len(rm_keys) > 0:
        print('Cannot provide both --rm_keys and --keys')
        exit(0)

    # load data keys and the total nb of values (m) ; only n values are read
    data, read_keys, m = phsp.load(input_filename, n)

    # default keys
    if keys == '' and len(rm_keys) == 0:
        for k in read_keys:
            keys += str(k)+' '
    
    # remove keys if needed
    if len(rm_keys) > 0:
        data, keys = phsp.remove_keys(data, read_keys, rm_keys)
    else:
        data, keys = phsp.select_keys(data, read_keys, keys)

    # shuffle
    if shuffle:
        np.random.shuffle(data)

    # special case
    if 'Ekine' in keys:
        index = keys.index('Ekine')
        keys[index] = 'E'
        print('Replace Ekine by E')
            
    # write 
    phsp.save_npy(output, data, keys)


# --------------------------------------------------------------------------
if __name__ == '__main__':
    phsp_convert()

